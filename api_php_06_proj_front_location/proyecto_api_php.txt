|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|---------------------------------------------------------------------- PROYECTO 01 ---------------------------------------------------------------------|
|----------------------------------------------------------------- API RESTFUL: LOCATION ----------------------------------------------------------------|
|-- Autor: Albeiro Ramos. Instructor SENA ---------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01. Estructura del Proyecto: ------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|


--- 01.01. Organiza tu proyecto de manera lógica. Una estructura común sería:

            mi_proyecto/
            ├── api/
            │   ├── categorias.php   # Archivo principal de la API de categorías
            │   ├── config/
            │   │   └── conexion.php  # Configuración de la base de datos
            │   └── models/
            │       └── categoria.php # Clase Categoria
            └── frontend/            # (Opcional) Aplicación frontend que consume la API
                └── ...

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02. conexion.php (Configuración de la Base de Datos):: ----------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|
                

<?php
    $host = "localhost"; // O la dirección de tu servidor de base de datos
    $usuario = "tu_usuario";
    $password = "tu_password";
    $database = "tu_base_de_datos";

    try {
        $conexion = new PDO("mysql:host=$host;dbname=$database", $usuario, $password);
        $conexion->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        die("Error de conexión: " . $e->getMessage());
    }
?>
3. categoria.php (Clase Categoria):

PHP

<?php
require_once("../config/conexion.php");

class Categoria {
    private $db;

    public function __construct() {
        global $conexion; // Usa la conexión global
        $this->db = $conexion;
    }

    public function get_categoria() {
        try {
            $stmt = $this->db->query("SELECT * FROM categorias");
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            throw new Exception("Error al obtener categorías: " . $e->getMessage());
        }
    }

    // ... (otros métodos: get_categoria_x_id, insert_categoria, update_categoria, delete_categoria)
}
?>
4. categorias.php (API de Categorías):

Aquí pegarías el código PHP mejorado que te proporcioné antes, con algunas adaptaciones:

Asegúrate de que las rutas en los require_once sean correctas.
Dentro de la clase Categoria, usa $this->db para acceder a la conexión a la base de datos.
5. Consideraciones Importantes:

Seguridad:
Validación exhaustiva: Valida todos los datos de entrada (usando filtros, expresiones regulares, etc.) para prevenir inyección de SQL, XSS y otros ataques.
Control de acceso: Implementa autenticación y autorización para proteger tu API. Puedes usar tokens JWT, sesiones, o cualquier otro método que se ajuste a tus necesidades.
Manejo de errores detallado: Proporciona mensajes de error específicos en las respuestas JSON para ayudar al cliente a entender qué falló.
Documentación:
Documenta tu API usando herramientas como Swagger o Postman. Esto facilitará el uso de tu API por otros desarrolladores.
Testing:
Escribe pruebas unitarias para cada método de tu clase Categoria y pruebas de integración para tu API. Esto te ayudará a detectar errores y asegurar la calidad de tu código.
Escalabilidad:
Si esperas un alto volumen de solicitudes, considera usar técnicas de caching, balanceo de carga y optimización de base de datos para mejorar el rendimiento de tu API.
Versiones de la API:
Si tu API evoluciona con el tiempo, implementa versionado (ej: /v1/categorias, /v2/categorias) para asegurar la compatibilidad con clientes existentes.
6. Ejemplo de Uso (Frontend):

Aquí te muestro un ejemplo de cómo podrías usar JavaScript para consumir tu API desde una aplicación frontend:

JavaScript

// Obtener todas las categorías
fetch('/api/categorias')
    .then(response => response.json())
    .then(data => {
        // Mostrar las categorías en la interfaz de usuario
        console.log(data.datos);
    });

// Crear una nueva categoría
fetch('/api/categorias', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({ cat_nom: 'Nueva categoría', cat_obs: 'Observación' })
})
    .then(response => response.json())
    .then(data => {
        // Actualizar la interfaz de usuario con la nueva categoría
        console.log(data.mensaje);
    });

// ... (otros ejemplos para actualizar y eliminar categorías)
Consideraciones Adicionales:

Frameworks: Considera usar frameworks PHP como Laravel o Symfony, que te proporcionan herramientas y estructuras para desarrollar APIs más robustas y mantenibles.
Base de datos: Elige la base de datos que mejor se adapte a tus necesidades (MySQL, PostgreSQL, MongoDB, etc.).
Hosting: Selecciona un proveedor de hosting confiable para desplegar tu API.
Espero que esta guía te sea útil para implementar tu código en un entorno de desarrollo real. Si tienes alguna otra pregunta, no dudes en preguntar.