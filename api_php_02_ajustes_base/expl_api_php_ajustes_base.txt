|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|---------------------------------------------------------------------- MEJORA DE -----------------------------------------------------------------------|
|----------------------------------------------------------------- API RESTFUL CON PHP ------------------------------------------------------------------|
|-- Autor: Albeiro Ramos. Instructor SENA ---------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

--- DESCRIPCIÓN: Este código PHP implementa un API RESTful para gestionar categorías en un sistema de inventario o similar.

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------- controller/categoria.php ---------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01. Cabecera y Requerimientos: ----------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|




Cambios y Explicaciones:

Rutas con Métodos HTTP:

Se reemplazó el uso de $_GET['op'] con la variable $_SERVER['REQUEST_METHOD'] para determinar el método HTTP de la solicitud (GET, POST, PUT, DELETE). Esto permite usar la semántica RESTful adecuada.
Las operaciones ahora se distribuyen en los casos GET, POST, PUT y DELETE del switch.
Función enviarRespuesta():

Se creó una función enviarRespuesta() para manejar de manera centralizada el envío de respuestas JSON. Esto asegura consistencia en el formato de las respuestas y facilita el manejo de códigos de estado HTTP.
Códigos de Estado HTTP:

Se utilizan códigos de estado HTTP más precisos (200 OK, 201 Created, 204 No Content, 400 Bad Request, 405 Method Not Allowed, 500 Internal Server Error) para indicar el resultado de cada operación.
Manejo de Errores con try-catch:

Se agregaron bloques try-catch para capturar excepciones que puedan ocurrir durante las operaciones de la base de datos. Esto permite enviar respuestas de error más informativas al cliente.
Validación de Entrada:

Se incluyeron validaciones básicas para los datos de entrada (cat_nom, cat_obs, cat_id) para prevenir errores y posibles vulnerabilidades.
Respuestas con Datos:

En lugar de solo mensajes "Correcto", las respuestas ahora incluyen los datos reales que se han insertado, actualizado u obtenido.
Consistencia en Nombres:

Se eliminaron las operaciones duplicadas (Deleteid y Eliminar) y se utiliza solo DELETE para eliminar categorías.
Ejemplo de Uso (Cliente):

Obtener todas las categorías (GET): GET /categorias
Obtener una categoría por ID (GET): GET /categorias?id=1
Crear una categoría (POST): POST /categorias (con datos JSON en el cuerpo de la solicitud)
Actualizar una categoría (PUT): PUT /categorias (con datos JSON en el cuerpo de la solicitud)
Eliminar una categoría (DELETE): DELETE /categorias (con ID en el cuerpo de la solicitud)
Este código mejorado es más robusto, seguro y sigue las mejores prácticas para APIs RESTful. Recuerda adaptar las validaciones y el manejo de errores a las necesidades específicas de tu aplicación.






|-----------------------------------------------------------------------------------------------------------------------------------|


1. Cabecera y Requerimientos:

PHP

<?php
header('Content-Type: application/json');
<?php: Abre el bloque de código PHP.
header('Content-Type: application/json');: Esta línea establece la cabecera HTTP Content-Type a application/json. Esto le dice al cliente (generalmente una aplicación frontend) que la respuesta del servidor estará en formato JSON. Es esencial para que el cliente pueda interpretar los datos correctamente.
PHP

require_once("../config/conexion.php");
require_once("../models/categoria.php");
$categoria = new Categoria();
require_once("../config/conexion.php");: Incluye el archivo conexion.php. Este archivo probablemente contiene la configuración para la conexión a la base de datos (credenciales, nombre de la base de datos, etc.).
require_once("../models/categoria.php");: Incluye el archivo categoria.php. Este archivo define la clase Categoria, que contiene los métodos para interactuar con la tabla de categorías en la base de datos (insertar, actualizar, eliminar, obtener, etc.).
$categoria = new Categoria();: Crea una instancia (objeto) de la clase Categoria. Este objeto se utilizará para llamar a los métodos de la clase y realizar las operaciones en la base de datos.
2. Función para Manejar Respuestas:

PHP

function enviarRespuesta($codigo, $mensaje, $datos = null) {
    http_response_code($codigo);
    echo json_encode(['mensaje' => $mensaje, 'datos' => $datos]);
    exit;
}
function enviarRespuesta($codigo, $mensaje, $datos = null): Define una función llamada enviarRespuesta que toma tres argumentos:
$codigo: El código de estado HTTP (ej: 200, 400, 500).
$mensaje: Un mensaje descriptivo de la respuesta.
$datos: Datos adicionales que se enviarán en la respuesta (opcional).
http_response_code($codigo);: Establece el código de estado HTTP de la respuesta.
echo json_encode(['mensaje' => $mensaje, 'datos' => $datos]);: Codifica un array asociativo en formato JSON y lo envía como respuesta al cliente. El array contiene el mensaje y los datos (si los hay).
exit;: Detiene la ejecución del script PHP después de enviar la respuesta.
3. Recepción de Datos:

PHP

$body = json_decode(file_get_contents("php://input"), true);
$body = json_decode(file_get_contents("php://input"), true);: Lee los datos enviados en el cuerpo de la solicitud HTTP (generalmente en formato JSON) y los decodifica en un array asociativo de PHP. Los datos se almacenan en la variable $body.
4. Rutas y Métodos HTTP:

PHP

$method = $_SERVER['REQUEST_METHOD'];

switch ($method) {
    // ... casos ...
}
$method = $_SERVER['REQUEST_METHOD'];: Obtiene el método HTTP de la solicitud (GET, POST, PUT, DELETE).
switch ($method): La estructura switch evalúa el método HTTP y ejecuta el caso correspondiente.
5. Casos del Switch (Operaciones CRUD):

GET (Obtener categorías):

PHP

case 'GET':
    if (isset($_GET['id'])) {
        // Obtener una categoría por ID
    } else {
        // Obtener todas las categorías
    }
    break;
if (isset($_GET['id'])): Verifica si se ha proporcionado un ID de categoría en la URL.
Si se proporciona un ID, se llama al método get_categoria_x_id() de la clase Categoria para obtener la categoría específica.
Si no se proporciona un ID, se llama al método get_categoria() para obtener todas las categorías.
En ambos casos, se utiliza la función enviarRespuesta() para enviar la respuesta JSON al cliente.
POST (Insertar categoría):

PHP

case 'POST':
    try {
        // Validar datos de entrada
        $datos = $categoria->insert_categoria($body['cat_nom'], $body['cat_obs']);
        enviarRespuesta(201, "Categoría creada", $datos);
    } catch (Exception $e) {
        enviarRespuesta(500, "Error al crear la categoría: " . $e->getMessage());
    }
    break;
try-catch: Bloque para manejar posibles errores durante la inserción.
$categoria->insert_categoria(...): Llama al método insert_categoria() para insertar la nueva categoría en la base de datos.
enviarRespuesta(201, "Categoría creada", $datos);: Envía una respuesta JSON con el código de estado 201 (Created) y los datos de la categoría creada.
PUT (Actualizar categoría):

PHP

case 'PUT':
    try {
        // Validar datos de entrada
        $datos = $categoria->update_categoria($body['cat_id'], $body['cat_nom'], $body['cat_obs']);
        enviarRespuesta(200, "Categoría actualizada", $datos);
    } catch (Exception $e) {
        enviarRespuesta(500, "Error al actualizar la categoría: " . $e->getMessage());
    }
    break;
Similar al caso POST, pero utiliza el método update_categoria() para actualizar una categoría existente.
DELETE (Eliminar categoría):

PHP

case 'DELETE':
    try {
        // Validar datos de entrada
        $categoria->delete_categoria($body['cat_id']);
        enviarRespuesta(204, "Categoría eliminada");
    } catch (Exception $e) {
        enviarRespuesta(500, "Error al eliminar la categoría: " . $e->getMessage());
    }
    break;
Similar a los casos anteriores, pero utiliza el método delete_categoria() para eliminar una categoría.
enviarRespuesta(204, "Categoría eliminada");: Envía una respuesta JSON con el código de estado 204 (No Content), ya que no hay contenido que devolver después de eliminar.
default (Método no permitido):

PHP

default:
    enviarRespuesta(405, "Método no permitido");
    break;
Este caso se ejecuta si el método HTTP no es ninguno de los anteriores (GET, POST, PUT, DELETE).
enviarRespuesta(405, "Método no permitido");: Envía una respuesta JSON con el código de estado 405 (Method Not Allowed).
En resumen:

Este código PHP implementa un API RESTful para gestionar categorías. Utiliza métodos HTTP (GET, POST, PUT, DELETE) para realizar las operaciones CRUD (Crear, Leer, Actualizar, Eliminar).  Incluye manejo de errores con try-catch, validación básica de entrada y envía respuestas JSON consistentes con códigos de estado HTTP adecuados. La función enviarRespuesta() centraliza el envío de respuestas JSON para mantener la consistencia y facilitar el manejo de errores.

Espero que esta explicación línea por línea te haya ayudado a comprender mejor el código. Si tienes alguna otra pregunta, no dudes en preguntar.