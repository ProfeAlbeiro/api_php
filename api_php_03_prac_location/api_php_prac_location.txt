|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------- EXPLICACIÓN ----------------------------------------------------------------------|
|----------------------------------------------------------------- API RESTFUL CON PHP ------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- DESCRIPCIÓN: Este código PHP implementa un API RESTful para gestionar categorías en un sistema de inventario o similar ------------------------------|
|-- ARCHIVO DE ANÁLISIS (API): controller/categoria.php -------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01. Cabecera y Requerimientos: ----------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

             1.  <?php
             2.  
             3.      header('Content-Type: aplication/json');
             4.      require_once("../config/conexion.php");
             5.      require_once("../models/categoria.php");
             6.  
             7.      $categoria = new Categoria();

--- header('Content-Type: aplication/json');     :  Esta línea establece la cabecera HTTP Content-Type a application/json. Esto indica al cliente 
                                                    (generalmente una aplicación frontend) que la respuesta del servidor estará en formato JSON. 
                                                    Es crucial para que el cliente pueda interpretar correctamente los datos.

--- require_once("../config/conexion.php");      :  Incluye el archivo conexion.php. Este archivo contiene la configuración para la conexión a la base
                                                    de datos (credenciales, nombre de la base de datos, etc.).                                                

--- require_once("../models/categoria.php");     :  Incluye el archivo categoria.php. Este archivo define la clase Categoria, que contiene los métodos 
                                                    para interactuar con la tabla de categorías en la base de datos (insertar, actualizar, eliminar, 
                                                    obtener, etc.).

--- $categoria = new Categoria();                :  Crea una instancia (objeto) de la clase Categoria. Este objeto se utilizará para llamar a los 
                                                    métodos de la clase y realizar las operaciones en la base de datos.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02. Recepción de Datos: -----------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

             7.      $body = json_decode(file_get_contents("php://input"), true);

--- file_get_contents("php://input")             :  Lee los datos enviados en el cuerpo de la solicitud HTTP. Este es el método utilizado para recibir 
                                                    datos enviados mediante POST, PUT o DELETE, que generalmente contienen los datos en formato JSON.

--- json_decode(..., true)                       :  Decodifica la cadena JSON recibida y la convierte en un array asociativo de PHP. El segundo 
                                                    argumento 'true' asegura que el resultado sea un array asociativo en lugar de un objeto. Los datos
                                                    del JSON se almacenan en la variable '$body'.

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03. Switch para las Operaciones: --------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            12.      switch($_GET["op"]){ // ... casos ... }

--- $_GET["op"]                                  :  Obtiene el valor del parámetro 'op' enviado en la URL. Este parámetro determina qué operación se va
                                                    a realizar (obtener todas las categorías, obtener una categoría por ID, insertar, actualizar, 
                                                    eliminar, etc.). Este es un enfoque común, aunque no siempre el más moderno para APIs RESTful. Se 
                                                    prefiere usar métodos HTTP (GET, POST, PUT, DELETE) para definir las operaciones.

--- switch                                       :  La estructura 'switch' evalúa el valor de '$_GET["op"]' y ejecuta el caso correspondiente.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04. Casos del Switch (Operaciones CRUD): ------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

--- 04.01. GetAll: Obtiene todas las categorías.

            14.          case "GetAll":
            15.              $datos=$categoria->get_categoria();
            16.              echo json_encode($datos);
            17.              break;

--- $categoria->get_categoria()                  :  Llama al método 'get_categoria()' de la clase 'Categoria'. Este método ejecuta una consulta SQL
                                                    para obtener todas las categorías de la base de datos. 

--- echo json_encode($datos)                     :  Codifica el array '$datos' (que contiene las categorías) en formato JSON y lo envía como respuesta
                                                    al cliente.


--- 04.02. GetId: Obtiene una categoría por ID.

            19.          case "GetId":
            20.              $datos=$categoria->get_categoria_x_id($body["cat_id"]);
            21.              echo json_encode($datos);
            22.              break;

--- $body["cat_id"]                             :   Obtiene el valor del ID de la categoría del array '$body' (que contiene los datos JSON de la 
                                                    solicitud).

--- $categoria->get_categoria_x_id(...)         :   Llama al método get_categoria_x_id() de la clase Categoria, pasando el ID como argumento. Este 
                                                    método consulta la base de datos para la categoría específica.


--- 04.03. Insert: Inserta una nueva categoría.

            24.          case "Insert":
            25.              $datos=$categoria->insert_categoria($body["cat_nom"],$body["cat_obs"]);
            26.              echo json_encode("Insert Correcto");
            27.          break;

--- $body["cat_nom"] y $body["cat_obs"]         :   Obtienen el nombre y la observación de la categoría del array $body.

--- $categoria->insert_categoria(...)           :   Llama al método insert_categoria() de la clase Categoria, pasando el nombre y la observación como 
                                                    argumentos.

--- echo json_encode("Insert Correcto")         :   Envía una respuesta JSON confirmando la inserción. Mejora: Debería devolver un código de estado 
                                                    HTTP adecuado (201 Created) y, posiblemente, la categoría recién creada.


--- 04.04. Update: Actualiza una categoría existente.

            29.          case "Update":
            30.              $datos=$categoria->update_categoria($body["cat_id"],$body["cat_nom"],$body["cat_obs"]);
            31.              echo json_encode("Update Correcto");
            32.          break;

--- Similar a Insert, pero utiliza el método update_categoria().  Mejora: Debería devolver un código de estado HTTP adecuado (200 OK) y, posiblemente, 
    la categoría actualizada.


--- 04.05. Delete: Elimina una categoría.

            34.          case "Delete":
            35.              $datos=$categoria->delete_categoria($body["cat_id"]); 
            36.              echo json_encode("Delete  Correcto");
            37.          break;

--- $categoria->delete_categoria(...)           :   Llama al método delete_categoria().

--- echo json_encode("Delete  Correcto")        :   Mejora: Debería devolver un código de estado HTTP adecuado (204 No Content) o 200 OK si se incluye 
                                                    información adicional.

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- Mejoras Generales: ----------------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

--- Manejo de errores: El código carece de manejo de errores. Debería incluir bloques try-catch para capturar excepciones (por ejemplo, errores de base 
    de datos) y devolver respuestas JSON con códigos de error HTTP apropiados.

--- Códigos de estado HTTP: Usar códigos de estado HTTP más precisos (201 Created, 204 No Content, 400 Bad Request, 500 Internal Server Error, etc.) 
    ayuda al cliente a entender el resultado de la solicitud.

--- Validación de entrada: Se debería validar la entrada del usuario (por ejemplo, cat_id, cat_nom, cat_obs) para prevenir errores y vulnerabilidades 
    de seguridad (como inyección de SQL).

--- Nombres de casos consistentes: Usar nombres más consistentes para los casos del switch (por ejemplo, delete en lugar de Deleteid y Eliminar). 
    Idealmente, usar métodos HTTP (DELETE) en lugar de un parámetro op.

--- Devolver datos en las respuestas: En lugar de solo mensajes "Correcto", sería mejor devolver los datos reales que se han insertado, actualizado o 
    eliminado.  Este análisis te da una visión clara de cómo funciona tu código.  
    
--- CONCLUSIÓN: Implementar las mejoras sugeridas hará que tu API sea más robusta, segura y fácil de usar.